// Simple invoice generator without Puppeteer dependency
import { jsPDF } from 'jspdf';

export interface InvoiceData {
  invoiceNumber: string;
  date: string;
  dueDate: string;
  partner: {
    name: string;
    address: string;
    email: string;
  };
  facility: {
    name: string;
    address: string;
  };
  period: {
    start: string;
    end: string;
  };
  energySavings: {
    baseline: number;
    actual: number;
    saved: number;
    rate: number;
    total: number;
  };
  revenue: {
    share: number;
    amount: number;
  };
  notes?: string;
}

export const invoiceGenerator = {
  async generatePDF(data: InvoiceData): Promise<Blob> {
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(20);
    doc.text('Revenue Sharing Invoice', 105, 20, { align: 'center' });
    
    // Invoice details
    doc.setFontSize(10);
    doc.text(`Invoice #: ${data.invoiceNumber}`, 20, 40);
    doc.text(`Date: ${data.date}`, 20, 50);
    doc.text(`Due Date: ${data.dueDate}`, 20, 60);
    
    // Partner info
    doc.setFontSize(12);
    doc.text('Bill To:', 20, 80);
    doc.setFontSize(10);
    doc.text(data.partner.name, 20, 90);
    doc.text(data.partner.address, 20, 100);
    doc.text(data.partner.email, 20, 110);
    
    // Facility info
    doc.setFontSize(12);
    doc.text('Facility:', 120, 80);
    doc.setFontSize(10);
    doc.text(data.facility.name, 120, 90);
    doc.text(data.facility.address, 120, 100);
    
    // Period
    doc.setFontSize(12);
    doc.text(`Billing Period: ${data.period.start} - ${data.period.end}`, 20, 130);
    
    // Energy savings details
    doc.setFontSize(12);
    doc.text('Energy Savings Summary', 20, 150);
    doc.setFontSize(10);
    doc.text(`Baseline Usage: ${data.energySavings.baseline.toLocaleString()} kWh`, 20, 160);
    doc.text(`Actual Usage: ${data.energySavings.actual.toLocaleString()} kWh`, 20, 170);
    doc.text(`Energy Saved: ${data.energySavings.saved.toLocaleString()} kWh`, 20, 180);
    doc.text(`Rate: $${data.energySavings.rate.toFixed(3)}/kWh`, 20, 190);
    doc.text(`Total Savings: $${data.energySavings.total.toLocaleString()}`, 20, 200);
    
    // Revenue share
    doc.setFontSize(12);
    doc.text('Revenue Share', 20, 220);
    doc.setFontSize(10);
    doc.text(`Share Percentage: ${data.revenue.share}%`, 20, 230);
    doc.setFontSize(14);
    doc.text(`Amount Due: $${data.revenue.amount.toLocaleString()}`, 20, 240);
    
    // Notes
    if (data.notes) {
      doc.setFontSize(10);
      doc.text('Notes:', 20, 260);
      doc.text(data.notes, 20, 270);
    }
    
    // Footer
    doc.setFontSize(8);
    doc.text('Generated by Vibelux Revenue Sharing Platform', 105, 280, { align: 'center' });
    
    return doc.output('blob');
  },
  
  async generateAndDownload(data: InvoiceData): Promise<void> {
    const blob = await this.generatePDF(data);
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `invoice-${data.invoiceNumber}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
};