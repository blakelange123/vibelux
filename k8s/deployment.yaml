# Kubernetes deployment configuration for Vibelux Visual Operations Platform
apiVersion: v1
kind: Namespace
metadata:
  name: vibelux-production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: vibelux-config
  namespace: vibelux-production
data:
  NODE_ENV: "production"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  INFLUXDB_URL: "http://influxdb-service:8086"
  INFLUXDB_ORG: "vibelux"
  INFLUXDB_BUCKET: "greenhouse_data"
  KAFKA_BROKERS: "kafka-service:9092"
  KAFKA_CLIENT_ID: "vibelux-app"
  MONGODB_URI: "mongodb://mongodb-service:27017/vibelux_docs"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: vibelux-secrets
  namespace: vibelux-production
type: Opaque
stringData:
  DATABASE_URL: "postgresql://vibelux:POSTGRES_PASSWORD@postgres-service:5432/vibelux_prod"
  REDIS_PASSWORD: "REDIS_PASSWORD"
  MONGODB_PASSWORD: "MONGODB_PASSWORD"
  INFLUXDB_TOKEN: "INFLUXDB_TOKEN"
  NEXTAUTH_SECRET: "NEXTAUTH_SECRET"
  CLERK_SECRET_KEY: "CLERK_SECRET_KEY"
  OPENAI_API_KEY: "OPENAI_API_KEY"
  PUSHER_APP_ID: "PUSHER_APP_ID"
  PUSHER_KEY: "PUSHER_KEY"
  PUSHER_SECRET: "PUSHER_SECRET"
  PUSHER_CLUSTER: "PUSHER_CLUSTER"

---
# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vibelux-app
  namespace: vibelux-production
  labels:
    app: vibelux-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vibelux-app
  template:
    metadata:
      labels:
        app: vibelux-app
    spec:
      containers:
      - name: vibelux-app
        image: vibelux/app:latest
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: vibelux-config
        - secretRef:
            name: vibelux-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: app-storage
          mountPath: /app/uploads
      volumes:
      - name: app-storage
        persistentVolumeClaim:
          claimName: vibelux-app-pvc

---
# Application Service
apiVersion: v1
kind: Service
metadata:
  name: vibelux-app-service
  namespace: vibelux-production
spec:
  selector:
    app: vibelux-app
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: ClusterIP

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: vibelux-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "vibelux_prod"
        - name: POSTGRES_USER
          value: "vibelux"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vibelux-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: vibelux-production
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432

---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: vibelux-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "vibelux"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vibelux-secrets
              key: MONGODB_PASSWORD
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: vibelux-production
spec:
  selector:
    app: mongodb
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: vibelux-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args: ["--requirepass", "$(REDIS_PASSWORD)", "--appendonly", "yes"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vibelux-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: vibelux-production
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379

---
# InfluxDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
  namespace: vibelux-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
    spec:
      containers:
      - name: influxdb
        image: influxdb:2.7
        env:
        - name: INFLUXDB_DB
          value: "greenhouse_data"
        - name: INFLUXDB_ADMIN_USER
          value: "vibelux"
        - name: INFLUXDB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vibelux-secrets
              key: INFLUXDB_PASSWORD
        ports:
        - containerPort: 8086
        volumeMounts:
        - name: influxdb-storage
          mountPath: /var/lib/influxdb2
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: influxdb-storage
        persistentVolumeClaim:
          claimName: influxdb-pvc

---
# InfluxDB Service
apiVersion: v1
kind: Service
metadata:
  name: influxdb-service
  namespace: vibelux-production
spec:
  selector:
    app: influxdb
  ports:
  - protocol: TCP
    port: 8086
    targetPort: 8086

---
# Kafka Deployment (Simplified single-node for production)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: vibelux-production
spec:
  serviceName: kafka-headless
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-service:9092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        ports:
        - containerPort: 9092
        volumeMounts:
        - name: kafka-storage
          mountPath: /var/lib/kafka/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
  volumeClaimTemplates:
  - metadata:
      name: kafka-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# Zookeeper Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: vibelux-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        ports:
        - containerPort: 2181
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# Services for Kafka and Zookeeper
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: vibelux-production
spec:
  selector:
    app: kafka
  ports:
  - protocol: TCP
    port: 9092
    targetPort: 9092

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: vibelux-production
spec:
  clusterIP: None
  selector:
    app: kafka
  ports:
  - protocol: TCP
    port: 9092
    targetPort: 9092

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: vibelux-production
spec:
  selector:
    app: zookeeper
  ports:
  - protocol: TCP
    port: 2181
    targetPort: 2181

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vibelux-app-pvc
  namespace: vibelux-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: vibelux-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: vibelux-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: vibelux-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influxdb-pvc
  namespace: vibelux-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vibelux-ingress
  namespace: vibelux-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  tls:
  - hosts:
    - your-domain.com
    secretName: vibelux-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vibelux-app-service
            port:
              number: 3000

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: vibelux-app-hpa
  namespace: vibelux-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vibelux-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80